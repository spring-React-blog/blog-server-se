plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.my.blog'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExtensions
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file('build/generated-snippets'))
	set('documentDir', file('src/main/resources/static/docs'))
	set('bootJarDocumentPath', 'static/docs')
	set('documentMarkdownDir', file('docs'))
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'mysql:mysql-connector-java'

	//QueryDSL
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation "com.querydsl:querydsl-jpa"
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	//JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

}
clean {
	delete documentDir
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	doFirst {
		delete documentDir
	}

	configurations('asciidoctorExtensions')
	inputs.dir snippetsDir
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into bootJarDocumentPath
	}
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("${asciidoctor.outputDir}")
	into documentDir
}

task copyDocumentMarkdown(type: Copy) {
	dependsOn copyDocument
	from file("${documentDir}")
	into documentMarkdownDir
	rename { String fileName ->
		fileName.replace("html", "md")
	}
}

build {
	dependsOn copyDocumentMarkdown
}